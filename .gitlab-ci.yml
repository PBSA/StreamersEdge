include:
  - template: Dependency-Scanning.gitlab-ci.yml

variables:
  SAST_ANALYZER_IMAGE_PREFIX: "registry.gitlab.com/gitlab-org/security-products/analyzers"
  SAST_DEFAULT_ANALYZERS: "eslint, secrets"
  SAST_ANALYZER_IMAGE_TAG: 2
  SAST_DISABLE_DIND: "true"
  SCAN_KUBERNETES_MANIFESTS: "false"

stages:
  - test
  - swagger
  - deploy

test:
  image: node:10.16-alpine
  stage: test
  variables:
    DB_USER: postgres
    DB_PASSWORD: ""
    DB_HOST: postgres
    DB_PORT: 5432
    DB_DATABASE: streamers-edge-test
    POSTGRES_DB: streamers-edge-test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: ""
    TWITCH_CLIENT_ID: $TEST_TWITCH_CLIENT_ID
    TWITCH_CLIENT_SECRET: $TEST_TWITCH_CLIENT_SECRET
    GOOGLE_CLIENT_ID: $TEST_GOOGLE_CLIENT_ID
    GOOGLE_CLIENT_SECRET: $TEST_GOOGLE_CLIENT_SECRET
    FACEBOOK_CLIENT_ID: $TEST_FACEBOOK_CLIENT_ID
    FACEBOOK_CLIENT_SECRET: $TEST_FACEBOOK_CLIENT_SECRET
    PUBG_API_KEY: $TEST_PUBG_API_KEY
    PEERPLAYS_PAYMENT_ACCOUNT_WIF: $TEST_PEERPLAYS_PAYMENT_ACCOUNT_WIF
    COINMARKETCAP_API_KEY: $TEST_COINMARKETCAP_API_KEY
    AWS_ACCESS_KEY_ID: $TEST_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $TEST_AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $TEST_AWS_DEFAULT_REGION
    
  services:
    - postgres:latest
    - mesosphere/aws-cli:latest
    
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - node_modules
  artifacts:
    paths:
      - docs/
  script:
    - apk add python make g++
    - npm ci
    - npm run db-migrate-all
    - npm run test:audit
    - npm run test:lint
    - npm run test:coverage
    - npm run build:doc
  tags:
    - docker
  only:
    - merge_requests
    - develop
    - master
    - web

license_management:
  stage: test
  image:
    name: "registry.gitlab.com/gitlab-org/security-products/license-management:$CI_SERVER_VERSION_MAJOR-$CI_SERVER_VERSION_MINOR-stable"
    entrypoint: [""]
  variables:
    SETUP_CMD: $LICENSE_MANAGEMENT_SETUP_CMD
  allow_failure: true
  script:
    - /run.sh analyze .
  artifacts:
      paths: [gl-license-management-report.json]
  dependencies: []
  only:
    refs:
      - branches
    variables:
      - $GITLAB_FEATURES =~ /\blicense_management\b/
  except:
    variables:
      - $LICENSE_MANAGEMENT_DISABLED

sast:
  stage: test
  allow_failure: true
  artifacts:
      paths: [gl-sast-report.json]
  only:
    refs:
      - branches
    variables:
      - $GITLAB_FEATURES =~ /\bsast\b/
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:stable-dind
  script:
    - export SAST_VERSION=${SP_VERSION:-$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')}
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - |
      printenv | grep -E '^(DOCKER_|CI|GITLAB_|FF_|HOME|PWD|OLDPWD|PATH|SHLVL|HOSTNAME)' | cut -d'=' -f1 | \
        (while IFS='\\n' read -r VAR; do unset -v "$VAR"; done; /bin/printenv > .env)
    - |
      docker run \
        --env-file .env \
        --volume "$PWD:/code" \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "registry.gitlab.com/gitlab-org/security-products/sast:$SAST_VERSION" /app/bin/run /code
  except:
    variables:
      - $SAST_DISABLED
      - $SAST_DISABLE_DIND == 'true'

.sast-analyzer:
  extends: sast
  services: []
  except:
    variables:
      - $SAST_DISABLE_DIND == 'false'
  script:
    - /analyzer run
    
eslint-sast:
  extends: .sast-analyzer
  image:
    name: "$SAST_ANALYZER_IMAGE_PREFIX/eslint:$SAST_ANALYZER_IMAGE_TAG"
  only:
    variables:
      - $GITLAB_FEATURES =~ /\bsast\b/ &&
          $SAST_DEFAULT_ANALYZERS =~ /eslint/ &&
          $CI_PROJECT_REPOSITORY_LANGUAGES =~ /javascript/

secrets-sast:
  extends: .sast-analyzer
  image:
    name: "$SAST_ANALYZER_IMAGE_PREFIX/secrets:$SAST_ANALYZER_IMAGE_TAG"
  only:
    variables:
      - $GITLAB_FEATURES =~ /\bsast\b/ &&
          $SAST_DEFAULT_ANALYZERS =~ /secrets/

swagger:
  stage: swagger
  dependencies:
    - test
  script:
    - mkdir -p "/var/www/swagger/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA"
    - cp docs/swagger.yaml "/var/www/swagger/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA"
    - cp docs/swagger.yaml "/var/www/swagger/$CI_COMMIT_REF_NAME"
  tags:
    - swagger

deployToDev:
  stage: deploy
  script:
    - bash deploy/deployToDev.sh
  only:
    - develop

deployToQAPR:
  stage: deploy
  script:
    - bash deploy/deployToQAPR.sh
  when: manual

deployToStaging:
  stage: deploy
  script:
    - bash deploy/deployToStaging.sh
  when: manual
